---
- name: Create Kubernetes service accounts and generate kubeconfig
  hosts: k3s_cluster
  become: false
  tasks:
    - name: Install pip
      become: true
      apt:
        name: "{{ item }}"
        state: present
      with_items:
        - python3-pip
        - python3-setuptools
        - python3-kubernetes

    - name: Read k3s kubeconfig file to extract CA cert
      become: true
      slurp:
        src: /etc/rancher/k3s/k3s.yaml
      register: k3s_kubeconfig

    - name: Print k3s kubeconfig content
      debug:
        msg: "{{ k3s_kubeconfig.content | b64decode | from_yaml }}"

    - name: Write k3s kubeconfig to ~/.kube/config
      copy:
        content: "{{ k3s_kubeconfig.content | b64decode }}"
        dest: "{{ ansible_env.HOME }}/.kube/config"
        mode: '0600'
      become: false

    - name: Extract certificate-authority-data from k3s.yaml
      set_fact:
        ca_data: "{{ (k3s_kubeconfig.content | b64decode) | from_yaml | json_query('clusters[0].cluster.\"certificate-authority-data\"') }}"

    - name: Create Kubernetes service accounts
      k8s:
        api_version: v1
        kind: ServiceAccount
        name: "{{ item }}"
        namespace: default
      loop: "{{ kubernetes_service_accounts }}"
    
    - name: Create Kubernetes cluster role binding for the service accounts
      k8s:
        resource_definition:
          apiVersion: rbac.authorization.k8s.io/v1
          kind: ClusterRoleBinding
          metadata:
            name: "{{ item }}-cluster-role-binding"
          roleRef:
            apiGroup: rbac.authorization.k8s.io
            kind: ClusterRole
            name: cluster-admin
          subjects:
            - kind: ServiceAccount
              name: "{{ item }}"
              namespace: default
      loop: "{{ kubernetes_service_accounts }}"

    - name: Create secret for the service accounts
      k8s:
        resource_definition:
          apiVersion: v1
          kind: Secret
          metadata:
            name: "{{ item }}"
            namespace: default
            annotations:
              kubernetes.io/service-account.name: "{{ item }}"
          type: kubernetes.io/service-account-token
      loop: "{{ kubernetes_service_accounts }}"

    - name: Get the token for the service account
      ansible.builtin.shell: |
        kubectl get secret -n default -o jsonpath='{.items[?(@.metadata.annotations.kubernetes\.io/service-account\.name=="{{ item }}")].data.token}' | base64 -d
      loop: "{{ kubernetes_service_accounts }}"
      register: token_result
      become: true

    - name: Print the token for the service account
      debug:
        msg: "{{ item.stdout }}"
      loop: "{{ token_result.results }}"
      when: item.stdout is defined

    - name: Set token_result as fact
      set_fact:
        token_result: "{{ token_result.results }}"
      when: token_result is defined

    - name: Generate kubeconfig file
      template:
        src: kubeconfig.yml.j2
        dest: "../kubeconfigs/{{ item }}-kubeconfig"
        mode: '0600'
      loop: "{{ kubernetes_service_accounts }}"
      loop_control:
        label: "{{ item }}"
        index_var: loop_index
      when: token_result is defined
      delegate_to: localhost
